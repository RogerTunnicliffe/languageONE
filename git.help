git config --list
.git/config Configuration file
Contains:-
	[remote "languageONE"]
		url = https://github.com/RogerTunnicliffe/languageONE.git
		fetch = +refs/heads/*:refs/remotes/languageONE/*

goto WorkDirectory and 
  git init
  git add *
  git add LICENSE
  git commit -m 'initial project version'
  
undo commit - keeps changes in work directory  
git reset --soft HEAD^ 
undo commit - also removes changes in work directory
git reset --hard HEAD^    *********** BE CAREFUL  
  
git status
	On branch master
	Changes not staged for commit:
	(use "git add/rm <file>..." to update what will be committed)
	(use "git checkout -- <file>..." to discard changes in working directory)
git status -u Show untracked files
 
git add <filename> add a file for tracking
git rm <filename> remove a file from tracking
	To remove a file from Git, you have to remove it from your tracked files 
	(more accurately, remove it from your staging area) and then commit. 
	The git rm command does that, and also removes the file from your working 
	directory so you donâ€™t see it as an untracked file the next time around.
	
git ls-files Show what is tracked/in the staging area/contained by the index 
  
COMMITTING
git commit -m 'Commit Message'
git commit -a -m 'Commit Message'
	the -a stages/commits at the same time without doing the "get add <filename> process
git commit --amend
	this allows you to modify @least the comment

Getting a particular file
    using HEAD   the most recent
	  HEAD~1 the most recent less one
	  HEAD~2 the most recent less two
	  etc

	git checkout HEAD <filename>
		This will get the most recent

	get checkout HEAD~1 <filename>
		This will get the most recent less one
	.
	.
	.
	git checkout <filename>
		This will get the 1st version

	ALSO WORKS BUT WHY BOTHER
	git show HEAD~n:languageONE.ASM > languageONE.???
	
    ELSE
	git log
		This will give you a list of commit points
	git checkout 0eae8428c340bc2c40c02c814ec79bf51aa256db <filename>
		Where the number represents the commit point

Creating an ARCHIVE
	git archive master --format=zip --output=./archive.zip	


REMOTE
------
To add a remote repository to GIT
	git remote add languageONE https://github.com/RogerTunnicliffe/languageONE.git

To store in the REMOTE repository
	git push https://github.com/RogerTunnicliffe/languageONE.git
	(Will send to remote-I think) After its all setup

But for us when the remote is just a backup.
Git's push --force is destructive because it unconditionally overwrites the remote repository with whatever you have locally
	git push --force https://github.com/RogerTunnicliffe/languageONE.git 
