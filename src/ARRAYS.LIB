	%assign debug 0
	%include '../include/LMACROS.CPY'
	%include '../include/IMACROS.CPY'
	%include '../include/CONSTANTS.INC'
	%line 5 ARRAYS.LIB

;	=================================================
;	GLOBAL ROUTINES/VARIABLES defined in this library
;	=================================================
;	Routines
;	--------
	global _ARRAYS
	global _ARRAYCOMPARE

;	===============================================
;	EXTERNAL ROUTINES/VARIABLES used by the library
;	===============================================
;	Routines
;	--------
	extern RETURN_CODE
	
;	------
;	Fields
;	------

;=======================================================================
;			Call parameters for _ARRAYS
;=======================================================================
;
;-----------------------------------------------------------------------
;				   R8	R9			R10
;			ARRAYS sort,ElementName,NoOfElements
;-----------------------------------------------------------------------

;=======================================================================
;			CODE SEGMENT
;=======================================================================				
			section .text	

_ARRAYS:
			cld
;-----------------------------------------------------------------------
;			SORT
;-----------------------------------------------------------------------						
	.sort:	cmp r8,$sort
				jne .futurefunctions					
			Call _SORT
			jmp _ARRAYS_EXIT

	.futurefunctions:
	
_ARRAYS_EXIT:
			ret

;=======================================================================
;      		Array Compare
;=======================================================================
;*	This is not guided thru the normal Mainline process because it acts 
;*	as a function in an IF statement.
;*	Refer to Arrays.If in LMACROS.CPY 
;=======================================================================
_ARRAYCOMPARE:

		cmp rax,rbx
			je .Equal
			jg .GreaterThan
			jl .LessThan

	.Equal:
		test r_Function,Equals	
			jnz .ExitTrue
		test r_Function,isNOTLessThan
		 	jnz .ExitTrue	
		test r_Function,isNOTGreaterThan
			jnz .ExitTrue
			  			  
	jmp .ExitFalse

	
	.GreaterThan:
		test r_Function,isGreaterThan
			jnz .ExitTrue
		test r_Function,isNOTEqualTo
			jnz .ExitTrue
		test r_Function,isNOTLessThan
			jnz .ExitTrue
				  
		jmp .ExitFalse				  

	.LessThan:
		test r_Function,isLessThan
			jnz .ExitTrue				  
		test r_Function,isNOTEqualTo
			jnz .ExitTrue				  
		test r_Function,isNOTGreaterThan
			jnz .ExitTrue				  

		jmp .ExitFalse				  
				 										 
	.ExitTrue:	
		mov qword[RETURN_CODE],c_TRUE
		jmp .Exit
			
	.ExitFalse:
		mov qword[RETURN_CODE], c_FALSE
		jmp .Exit
	
	.Exit:
	
_ARRAYCOMPARE_EXIT:
	ret
	
;=======================================================================
;      		(QUICK SORT)
;=======================================================================
;				   R8	R9
;			ARRAYS sort,Array
;-----------------------------------------------------------------------
_SORT:
	push 0
	push R10
	Call _QSort
	pop rax
	pop rax
_SORT_EXIT:
	ret
	
;-----------------------------------------------------------------------

;-----------------------------------------------------------------------
	%define @left 		r11
	%define @right 		r12
	%define @pivotValue r13
	%define @prevLeft 	r14
	
_QSort:

	mov @left,qword[rsp+16]												; get the Left Index
	mov @right,qword[rsp+8]												; get the Right Index

;	if  left >= right
	cmp @left,@right													; Exit when Left is not < Right
		jnl .Exit

;	pivotValue = RandomNo[ [ left + right / 2 ] ]						; CALCULATE pivotValue
	mov rax,@left														; grab the left			
	add rax,@right														; add the right
	shr rax,1															; and divide by 2
	shl rax,3															; Multiply by the quadword size
	mov @pivotValue,qword[r_Table+rax]									; and store pivotValue
	
;	prevLeftIdx = [moveThem]
	push @left															; preserve the Left index
	push @right															; preserve the Right index
	call _moveThem														; do the moves
	pop @right															; restore the Right index
	pop @left															; restore the Left index
	mov @prevLeft,rax													; and save the returned value
	
;	-------------------------------------
;	Recursive Call - (left, prevLeft - 1)
;	-------------------------------------
	push @left															; preserve the Left index
	push @right															; preserve the Right index
	push @left															; push the st parameter (left)
	mov rax,@prevLeft													; get the previous left
	dec rax																; minus 1
	push rax															; push the 2nd parameter
	Call _QSort															; Call yourself
	pop rax																; junk this
	pop rax																; junk this
	pop @right															; restore the Right Index
	pop @left															; restore the Left Index
	
;	----------------------------------
;	Recursive Call - (prevLeft, right)	
;	----------------------------------
	push @left															; preserve the Left index
	push @right															; preserve the Right index
	push @prevLeft														; push the 1st parameter (previous Left)
	push @right															; push the 2nd parameter (right)
	Call _QSort															; Call yourself
	pop rax																; junk this
	pop rax																; junk this
	pop @right															; restore the Right Index
	pop @left															; restore the Left Index
	
	.Exit:
_QSort_EXIT:
	ret

;-----------------------------------------------------------------------
;		_moveThem
;-----------------------------------------------------------------------
_moveThem:

;	repeat.while (left <= right)
	cmp @left,@right													; Compare Left to Right Index
		jg .Exit														; exit if Left > Right

;	repeat.while (RandomNo[left] < pivotValue)
;		left 	= left + 1
;	end.repeat
	.start1:
		mov rax,@left													; grab the Left index
		shl rax,3														; and multiply by 8
		mov rbx,rax														; Store for the swap below
		cmp qword[r_Table+rax],@pivotValue								; compare the table value to the pivotValue 
			jnl .cont1													; Exit if not < than
			inc @left													; next Left slot
			jmp .start1													; and loop
	.cont1:

;	repeat.while (left <= right)
	cmp @left,@right													; Compare Left to Right Index
		jg .Exit														; exit if Left > Right
		
;	repeat.while (RandomNo[right]> pivotValue)
;		right 	= right - 1
;	end.repeat
	.start2:
		mov rax,@right													; grab the Right index
		shl rax,3														; and multiply by 8
		cmp qword[r_Table+rax],@pivotValue								; compare the table value to the pivotPoint
			jng .cont2													; Exit if not > than
			dec @right													; previpus Right slot 
			jmp .start2													; and loop
	.cont2:

	cmp @left,@right													; Compare Left to Right Index
		jg .Exit														; exit if Left is > Right
		jl .DoTheMove													; Do the move is lees than
	
	;	No need to do the move if left = right
		inc @left														; increment the left
		jmp .Exit														; and head for the exit
		
;	if left <= right - SWAP left and right data
.DoTheMove:		
	mov r14,qword[r_Table+rbx]											; LEFT value to r14
	mov r15,qword[r_Table+rax]											; RIGHT value to r15								
	mov qword[r_Table+rax],r14											; r14 to RIGHT value
	mov qword[r_Table+rbx],r15											; r15 to LEFT value	

	inc @left															; Next Left
	dec @right															; Previous Right	
	jmp _moveThem														; Back to the Start
		
.Exit:	
	mov rax,@left														; Return the Left value

_moveThem_EXIT:
	ret
	