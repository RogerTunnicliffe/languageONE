%include 'include/BEGIN.PROGRAM'

;	Refer to VERSION.HISTORY for...well...version history

;	BEGIN.SYNONYMS **************************************
;		$.	:	WORDS.  
;		@.	:	INTEGERS.  
;		#.	:	NUMBERS.  
;		f.	:	FILES. 
;		xT.	:	XTABLES. 
;	END.SYNONYMS ****************************************

;=======================================================================
;		PROGRAM DATA
;=======================================================================	      

;-----------------------------------------------------------------------
;		DICTIONARY
;-----------------------------------------------------------------------
%include 'include/BEGIN.DICTIONARY'

	insertword letters,				26,'abcdefghijklmnopqrstuvwxyz'
	insertword key,					26,''

%include 'include/END.DICTIONARY'

;-----------------------------------------------------------------------
;		MATRIX
;-----------------------------------------------------------------------
%include 'include/BEGIN.MATRIX'

	insertnumber StartSeconds,		0,'99999999999999999999999999'
	insertnumber EndSeconds,		0,'99999999999999999999999999'
	
	insertnumber I,					0
	insertnumber J,					0
	insertnumber K,					0

	insertnumber seconds,			0,'99999999999999999'
	insertnumber milliseconds,		0,'.999999'
	
%include 'include/END.MATRIX'

;-----------------------------------------------------------------------
;		FILES
;-----------------------------------------------------------------------
%include 'include/BEGIN.FILES'

	%define c_recordLength 1015
	BEGIN.RECORD c_recordLength,TestRecord
		insertword TestKey,			0026,''
		insertword TestFiller,		0989,''
	END.RECORD TestRecord	
	
%include 'include/END.FILES'

;-----------------------------------------------------------------------
;		TABLES
;-----------------------------------------------------------------------
%include 'include/BEGIN.TABLES'	

;		%define c_No 1000000
;	**	Not enough memory on my Windows system		
		%define c_No 900000
		
		%define TestTable_Size ((c_recordLength + 9) * c_No)
	insertXtable TestTable

%include 'include/END.TABLES'
			
;=======================================================================
;		PROGRAM INSTRUCTIONS
;		Mainline  
;=======================================================================
%include 'include/BEGIN.INSTRUCTIONS'

	$Call Initialise
	
	date.timer seconds,milliseconds
	display "start=",seconds,milliseconds,LF
	
	$qsort	EQU 00001001B
	%imacro SORT 3
		begin.assembler
			mov r8,$qsort
			mov r9,%1
			$extract %2
			pop r10
			mov r10,[r10]
			$extract %3
			pop r11
			mov r11,[r11]
			call _QuickSort
		end.assembler
	%endmacro

;	SORT TestTable,1,26
	xtables.sort (TestTable,1,26)

	date.timer seconds,milliseconds
	display "stop= ",seconds,milliseconds,LF
	
	$Call DisplayThem

%include 'include/END.INSTRUCTIONS'
%include 'include/END.PROGRAM'      

BEGIN.SUB Initialise

;	xtables.Bind TestTable,TestRecord,1024000000
;	TestTable_UBOUND = 1000000

;	**	Not enough memory on my Windows system	
	xtables.Bind TestTable,TestRecord,921600000
	TestTable_UBOUND = 900000

	display.line "Preparing the Array - Please wait"
	repeat.for I,1,c_No
		repeat.for J,1,26
			numbers.random 2,K
			begin.assembler
				mov rax,qword[K]
				mov rbx,10
				cqo
				idiv rbx
				mov qword[K],rdx
			end.assembler
			K = K + 1
			{key,J} = {letters,K,1}
		end.repeat
		TestKey[I] = key
	end.repeat
	display.line "Sorting now"

;	TestKey[01] = "10"
;	TestKey[02] = "01"
;	TestKey[03] = "06"
;	TestKey[04] = "04"
;	TestKey[05] = "08"
;	TestKey[06] = "07"
;	TestKey[07] = "02"
;	TestKey[08] = "05"
;	TestKey[09] = "09"
;	TestKey[10] = "03"

END.SUB Initialise

BEGIN.SUB DisplayThem
	repeat.for I,1,10
		display.line TestKey[I]
	end.repeat
END.SUB Finalise

begin.assembler
	%define r_recordLength	r8
;	%define r_Table	 		R9
;	%define r_Record 		R10
	%define r_startPos		r10				
	%define r_noOfBytes		r11
	%define r_Ubound		r15
;	%define @tableSize(x)		qword[x-8]
;	%define @recordAddress(x)	qword[x-17]
;	%define @tableStatus(x)		qword[x-91]
	%define @tableUbound(x)		qword[x-61]

	%define @tableSize(x)		qword[x-8]
	%define @recordAddress(x)	qword[x-17]
	%define @tableStatus(x)		qword[x-91]

%imacro $getAddress 2
	mov %1,qword[r_Table]					; Start of Table to RSI/RDI
	mov rax,%2								; Lower/Upper to RAX
	mul r_recordLength						; Multiply by Record Length
	add %1,rax								; add offset to RSI/RDI
	
	mov rax,%1								; save the real address
	
	%%If:cmp qword[%1],0					; If Index is zero
			ja %%EndIf						;	then
		mov qword[%1],%1					;	set index as address
	%%EndIf:				
		
	mov %1,qword[%1]						; and use the index
%endmacro


;	Will be available in TABLES.CPY
	


	[section .data]
		d_startPos				dq 0
		d_noOfBytes				dq 0
	[section .text]

	
_QuickSort:

	%define @left r10
	%define @right r11
	%define @pivotValue r12
	%define @prevLeft r13
	
;	[section .bss]
;		pivotValue		resb 128										; This gives tha max sortkey size
;	[section .text]	

;	DO THIS 1ST so r10,r11 are available Get start offset and No Of Bytes 
	mov qword[d_noOfBytes],r_noOfBytes									; and save it
	dec r_startPos														; decrement the offset by 1
	mov qword[d_startPos],r_startPos									; and save it

;	Get Record Length
	mov r_recordLength,@recordAddress(r_Table)					; Get Record Address
	mov r_recordLength,@fieldLength(r_recordLength)				; Get record Length	
	add r_recordLength,9				
			
;	Get upper boundary	
	mov rax,@tableUbound(r_Table)										; Get UBound index
	dec rax																;	less 1

;	Recursive Call
	push 0																; Push the 1st Left
	push rax															; Push the 1st Right (UBound)
	Call _QSort
	pop rax
	pop rax

_QuickSort_EXIT:
	ret
	

_QSort:

	mov @left,qword[rsp+16]												; get the Left Index
	mov @right,qword[rsp+8]												; get the Right Index
	
;	if  left >= right										xed
; Exit when Left is not < Right
	cmp @left,@right
		jnl .Exit

;	pivotValue = RandomNo[ [ left + right / 2 ] ]						; CALCULATE pivotValue
	mov rax,@left														; Grab the left
	add rax,@right														; add the right
	shr rax,1															; divide by 2
	$getAddress RSI,rax													; get the address of this slot
	add RSI,9															; and jump over index
	add RSI,qword[d_startPos]											; add the requested starting position
	mov @pivotValue,RSI

	
;	prevLeftIdx = [moveThem]
	push @left															; preserve the Left index
	push @right															; preserve the Right index
	call _moveThem														; do the moves
	pop @right															; restore the Right index
	pop @left															; restore the Left index														
	mov @prevLeft,rax													; and save the returned value
	
;	-------------------------------------
;	Recursive Call - (left, prevLeft - 1)
;	-------------------------------------
	push @left															; preserve the Left index
	push @right															; preserve the Right index
	push @left															; push the 1st parameter (Left)
	mov rax,@prevLeft													; get the previous left
	dec rax																; minus 1
	push rax															; push the 2nd parameter
	Call _QSort															; Call yourself 	
	pop rax																; Junk this
	pop rax																; Junk this
	pop @right															; restore the Right index
	pop @left															; restore the Left index
	
;	----------------------------------
;	Recursive Call - (prevLeft, right)	
;	----------------------------------
	push @left															; preserve the Left index
	push @right															; preserve the Right index
	push @prevLeft														; push the 1st parameter (previous left
	push @right															; push the 2nd parameter (Right0
	Call _QSort															; Call yourself
	pop rax																; Junk this
	pop rax																; Junk this
	pop @right															; restore the Right index
	pop @left															; restore the Left index
	
	.Exit:
_QSort_EXIT:
	ret
	
_moveThem:

;	repeat.while (left <= right)
	cmp @left,@right													; Compare Left to Right Index
		jg .Exit														; exit if Left is > Right

;	repeat.while (Key[left] < pivotValue)
;			left 	= left + 1
;	end.repeat
	.start1:$getAddress RSI,@left										; Get the Start of the record 
			add RSI,9													; and jump over index
			add RSI,qword[d_startPos]									; add the requested starting position
			mov RDI,@pivotValue
			mov rcx,qword[d_noOfBytes]									; Grab the length (LOOP Ctr)
		Call _CMPSTR
			jnl .cont1													; If result not < than exit While Loop											
			inc @left													; get the next table slot			
			jmp .start1													; and repeat
	.cont1:

;	repeat.while (left <= right)
	cmp @left,@right													; Compare Left to Right Index
		jg .Exit														; exit if Left is > Right
		
;	repeat.while (Key[right]> pivotValue)
;		right 	= right - 1
;	end.repeat
	.start2:$getAddress RSI,@right										; Get the Start of the record
			add RSI,9													; and jump over index
			add RSI,qword[d_startPos]									; add the requested starting position
			mov RDI,@pivotValue	
			mov rcx,qword[d_noOfBytes]									; Grab the length (LOOP Ctr)
		Call _CMPSTR
			jng .cont2													; If result not > than exit While Loop	
			dec @right													; get the previous table slot
			jmp .start2													; and repeat
	.cont2:

	cmp @left,@right													; Compare Left to Right Index
		jg .Exit														; exit if Left is > Right
		jl .DoTheMove													; Do the move if less than
	
	;	No need to do the move if left = right
		inc @left														; increment the left 
		jmp .Exit														; and head for the exit
		

;	if left <= right - SWAP left and right data
.DoTheMove:	
	$getAddress RSI,@left												; RSI will contain the INDEX
	mov r14,rax															; RAX will contain the REAL address
	$getAddress RDI,@right												; RDI will contain the INDEX
	mov r15,rax															; RAX will contain the REAL address
	mov [r15],RSI														; Swap the indexes
	mov [r14],RDI														; 
	
	inc @left															; Next Left
	dec @right															; Previous Right
	jmp _moveThem														; Back to the Start
		
.Exit:	
	mov rax,@left														; Return the Left value

_moveThem_EXIT:
	ret

end.assembler


