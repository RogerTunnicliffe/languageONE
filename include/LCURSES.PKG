	
	%define c_AM_RecordLen 		08
	%define c_M_RecordLen		64
	
	[section .data]
	    insertnumber sRow,	0
	    insertnumber sCol,	0
	    insertnumber eRow,	0
	    insertnumber eCol,	0
	    insertnumber Idx,	0
	[section .text]	

	%imacro lcurses.HLine 3
		integers.eq sRow,%1
		integers.eq sCol,%2
		integers.eq eCol,%3
		$Call HLine
	%endmacro
	BEGIN.SUB HLine
		repeat.for Idx,sCol,eCol
			display.at sRow,Idx,c_Line
		end.repeat
	END.SUB HLine

	%imacro lcurses.VLine 3
		integers.eq sRow,%1
		integers.eq sCol,%2
		integers.eq eRow,%3
		$Call VLine
	%endmacro		
	BEGIN.SUB VLine
		repeat.for Idx,sRow,eRow
			display.at Idx,sCol,c_Bar
		end.repeat
	END.SUB VLine

	[section .data]
	    insertnumber startRow,	0
	    insertnumber startCol,	0
	    insertnumber endRow,	0
	    insertnumber endCol,	0
	    insertnumber shadow,    c_FALSE
	[section .text]

	%imacro lcurses.Box 5
		integers.eq startRow,%1
		integers.eq startCol,%2
		integers.eq endRow,%3
		integers.eq endCol,%4
		integers.eq shadow,%5
		$Call Box
	%endmacro	
	BEGIN.SUB Box
		display.at startRow,startCol,c_TopLeft
		display.at startRow,endCol,c_TopRight
		display.at endRow,startCol,c_BottomLeft
		display.at endRow,endCol,c_BottomRight
		
		integers.calc I,=,startCol,+,1
		integers.calc J,=,endCol,-,1		
		lcurses.HLine startRow,I,J		
		lcurses.HLine endRow,I,J
		
		integers.calc I,=,startRow,+,1
		integers.calc J,=,endRow,-,1		
		lcurses.VLine I,startCol,J
		lcurses.VLine I,endCol,J
		
		integers.calc I,=,startRow,+,1
		integers.calc J,=,endRow,-,1
		integers.calc K,=,startCol,+,1
		integers.calc L,=,endCol,-,startCol,-,1
		
		repeat.for Idx,I,J
			display.at Idx,K,spaces(L)
		end.repeat
		
		if  shadow,=,c_TRUE
		    display c_BlackBG
		    integers.calc I,=,endRow,+,1
		    integers.calc J,=,startCol,+,1
		    integers.calc K,=,endCol,-,startCol,+,1
		    display.at I,J,spaces(K)
	
		    integers.calc J,=,endCol,+,1
		    integers.calc K,=,startRow,+,1
		    integers.calc L,=,endRow,+,1
		    repeat.for I,K,L
		        display.at I,J,spaces(1)
		    end.repeat
		end.if
		
	END.SUB Box

;-----------------------------------------------------------------------
;	Handles Menus
;-----------------------------------------------------------------------
	[section .data]
		insertnumber	getResponse,		00,'99'
		insertnumber	displayLen,			00,'99'
		insertnumber	lastMenuRow,		00,'99'
		insertnumber	menuCol,			00,'99'
		insertnumber 	selectedTableRow,	00,'99'
		insertnumber	selectedMenuRow,	00,'99'
		insertnumber	direction,			00,'9'
        insertword      response,           01,''		
	[section .text]

	%imacro lcurses.MenuItems 5
		%ifnum %4
			mov qword[M_Target],%4
		%else
			mov rax,%4
			mov qword[M_Target],rax
		%endif
		words.pad %3,M_Type
		words.pad %5,M_Entry
		tables.rput M_Table,%1,%2
	%endmacro	
	
	%imacro lcurses.Menu 2
		integers.eq AM_Idx,%1
		integers.eq getResponse,%2
		$Call Menu
	%endmacro
	
	%imacro lcurses.Call 1
		Call qword[%1]
	%endmacro
	
BEGIN.SUB Menu

	tables.rget AM_Table,AM_Idx												; grab the entry from AllMenus table

;	------------
;	Draw the Box
;	------------
	display c_ResetAll,c_LightGreyBG,c_BlackFG								; set the video attributes	
	lcurses.Box AM_StartRow,AM_StartCol,AM_EndRow,AM_EndCol,c_TRUE			; and draw a box
	
;	--------------------------------------------------
;	Get the Menu Row and Column and the display length
;	--------------------------------------------------
	integers.eq 	lastMenuRow,AM_StartRow									; set the menu row to the 1st line of the menu
	integers.calc	menuCol,=,AM_StartCol,+,1								; set the menu col to menu col + 1
	integers.calc 	displayLen,=,AM_EndCol,-,AM_StartCol,-,1				; calc the length of the entry

;	----------------------------
;	Loop thru for each menu item
;	----------------------------
	repeat.for M_Idx,1,c_M_NoOfRecords										; loop thru the Menu Table			
		tables.rget M_Table,AM_Idx,M_Idx									; and get the record for this menu

	;	-------------
	;	If its a line
	;	-------------
		if M_Type,=,"-"														; IF its a seperator
		
			display c_ResetAll,c_LightGreyBG,c_BlackFG						; reset the attributes

			integers.add lastMenuRow,1										; goto to the next screen row										
			display.at lastMenuRow,AM_StartCol,c_MiddleLeft					; display the left token
			display.at lastMenuRow,AM_EndCol,c_MiddleRight					; display the right token
			integers.calc I,=,AM_EndCol,-,1									; get the end position
			lcurses.HLine lastMenuRow,menuCol,I								; and draw the line	
			
		else																; ELSE
		;	---------
		;	Menu Item
		;	---------
			if M_Type,!=,spaces(1)											; IF its not blank	
			
				display c_ResetAll,c_LightGreyBG,c_BlackFG					; reset the attributes

				integers.add lastMenuRow,1									; goto to the next screen row			
				if M_Idx,=,1												; IF the 1st occurence
					integers.eq selectedTableRow,M_Idx						; store the current selection 
					integers.eq selectedMenuRow,lastMenuRow					; and its row on screen
					display c_Reverse										; display in reverse video
				else														; ELSE				
					display c_ResetReverse									; reset to normal
				end.if														; END
				display.at lastMenuRow,menuCol,{M_Entry,1,displayLen}		; display the menu entry
			end.if
		end.if
			
	end.repeat
	
;	----------------------------
;	Setup for 1st entry
;	----------------------------
	integers.calc selectedMenuRow,=,AM_StartRow,+,1							; Setup the current selection
	integers.eq M_Idx,1														; setup the 1st entry
	tables.rget M_Table,AM_Idx,1											; get the tables data
			
;	--------------
;	Get a response
;	--------------	
	repeat.while getResponse,=,c_TRUE										; REPEAT

		display c_HideCursor												; Hide the cursor
	    accept.at 01,01,response		            						; and get a keystroke
		display c_ShowCursor												; Show the cursor

	;	----------------------
	;	RETURN WITH THESE KEYS
	;	----------------------
		if RETURN_CODE,_IN,{ESCAPE,RETURN,ARROWLEFT,ARROWRIGHT}				; If a return key is pressed
			integers.eq exitRepeat,c_TRUE									; exit
		end.if																; END
		
	;	---------
	;	ARROWDOWN
	;	---------
		.if  RETURN_CODE,=,ARROWDOWN										; IF we have an arrow down
		.and selectedMenuRow,<,lastMenuRow									; and we are NOT on the last row	
		.end
			integers.eq direction,+1										; set direction to ADD
			$Call Select													; and change the selected item
		end.if																; END

	;	-------
	;	ARROWUP
	;	-------
		.if RETURN_CODE,=,ARROWUP											; IF we have an arrow up
		.and selectedTableRow,>,1											; and we are NOT on the 1st row
		.end
			integers.eq direction,-1										; set direction to SUBTRACT
			$Call Select													; and change the selected item
		end.if																; END
				
	end.repeat _04
	
END.SUB Menu

BEGIN.SUB Select

;	-------------------------------------------
;	This will move the selection up or down
;	depending on the value of 'direction'
;	If direction is +1 we are moving down the list
;	If direction is -1 we are moving up the list
;	-------------------------------------------

	tables.rget M_Table,AM_Idx,selectedTableRow								; get the current selection

;	------------------------
;	Unselect the current one
;	------------------------
	display c_ResetAll,c_LightGreyBG,c_BlackFG								; and reset the video			
	cursor selectedMenuRow,menuCol											; go to it
	display.at selectedMenuRow,menuCol,{M_Entry,1,displayLen}				; display the menu entry
				
;	-------------------------------
;	get the next/previous selection
;	-------------------------------
	if direction,>,0														; IF we have an arrow down													
		integers.calc I,=,selectedTableRow,+,1								; select the next table row
		integers.eq	  J,c_M_NoOfRecords										; and set the end point
	else																	; ELSE arrow up
		integers.calc I,=,selectedTableRow,-,1								; select the previous row
		integers.eq	  J,1													; and set the start point
	end.if

	repeat.for selectedTableRow,I,J											; find the next/previous selection in the table
		integers.add selectedMenuRow,direction								; and on screen
		tables.rget M_Table,AM_Idx,selectedTableRow							; get the tables data					
		if M_Type,_NIN,{" ","-"}											; if its a genuine menu item
			integers.eq exitRepeat,c_TRUE									; we exit
		end.if																; END
	end.repeat																; END

;	--------------
;	and display it
;	--------------
	cursor selectedMenuRow,menuCol											; go to it
	display c_ResetAll,c_LightGreyBG,c_BlackFG								; reset the attributes
	display c_Reverse,														; and reverse the video	
	display.at selectedMenuRow,menuCol,{M_Entry,1,displayLen}				; display the menu entry

	integers.eq M_Idx,selectedTableRow										; and set the table Idx

END.SUB Select

;-----------------------------------------------------------------------
;	Handles AcceptAt with much better key control
;-----------------------------------------------------------------------
	[section .data]
		insertnumber 	Len,	00											; Length of input field
		insertword		Char,	01,''										; One char ata a time
		insertword		Temp,	80,''										; used for insert
		fieldAddress	dq 		00											; Address of input field
	[section .text]

	%imacro lcurses.AcceptAt 3

		integers.eq startRow,%1												; Grab the row
		integers.eq startCol,%2												; Grab the column
		mov qword[fieldAddress],%3											; Grab the address of the input field
		mov rax,@fieldLength(%3)											; Grab the length of the input field
		mov qword[Len],rax													; and save it
		Call AcceptAt

	%endmacro

BEGIN.SUB AcceptAt

	integers.eq I,1															; Starting at 1st char of input field
	integers.eq J,startCol													; Field position on screen													

	repeat.while 1,=,1														; ENDLESS LOOP

		Accept.At startRow,J,Char											; Accept a character

		begin.test RETURN_CODE												; and test it

		;	---------
		;	ARROWLEFT
		;	---------
			when =,ARROWLEFT												; WHEN its ARROWLEFT
				if I,>,1													; IF its greater than 1
					integers.sub I,1										; move left 1
					integers.sub J,1										; move left 1
				end.if														; END
			wend															; WEND

		;	----------
		;	ARROWRIGHT
		;	----------
			when =,ARROWRIGHT												; WHEN its ARRWORIGHT
				if I,<,Len													; IF its not at the end of the field
					integers.add I,1										; move right 1
					integers.add J,1										; move right 1
				end.if														; END
			wend															; WEND

		;	----
		;	HOME
		;	----
			when =,HOME														; WHEN its HOME
				integers.eq I,1												; move to the start of the field
				integers.eq J,startCol										; move to the start of screen position
			wend															; WEND

		;	---
		;	END
		;	---
			when =,END														; WHEN its END
				integers.eq I,Len											; move to the end of the field 
				integers.calc J,=,startCol,+,Len,-,1						; move to the end of screen position
			wend															; WEND

		;	---------
		;	EXIT KEYS
		;	---------
			when _IN,{RETURN,ESCAPE,ARROWUP,ARROWDOWN}						; WHEN an exit key 
				integers.eq exitRepeat,c_TRUE								; Exit the LOOP
			wend															; WEND

		;	------------
		;	END OF FIELD
		;	------------
		;	STDIO will return automatically when at the end of this 1char field	
			when =,ENDOFFIELD
				words.copy Char,{qword[fieldAddress],I,1}					; Copy the char to the input field
				if I,<,Len													; If we at not at the end				
					integers.add I,1										; move to the right
 					integers.add J,1										; move to the right
				end.if														; END
			wend															; WEND

		;	---------
		;	BACKSPACE
		;	---------
			when =,BACKSPACE
				if I,>,1													; IF its greater than 1
					integers.eq K,I
					integers.sub I,1										; move left 1
					integers.sub J,1										; move left 1
					words.pad {qword[fieldAddress],K},{qword[fieldAddress],I}
					display.at startRow,startCol,qword[fieldAddress]		; and redisplat it
				end.if														; END
			wend

		;	------
		;	INSERT
		;	------
			when =,INSERT
				words.pad {qword[fieldAddress],I},Temp						; copy from cursor to temp
				integers.calc K,=,I,+,1										; move over 1
				words.pad Temp,{qword[fieldAddress],K}						; copy back to new spot
				words.copy spaces(1),{qword[fieldAddress],I}				; stick in a space
				display.at startRow,startCol,qword[fieldAddress]			; and redisplay it
			wend

		end.test															; END of TEST

	end.repeat																; END of LOOP

END.SUB AcceptAt
	
	[section .data]


	
