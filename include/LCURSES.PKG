	
	%define c_AM_RecordLen 		08
	%define c_M_RecordLen		64
	
	[section .data]
	    insertnumber sRow,	0
	    insertnumber sCol,	0
	    insertnumber eRow,	0
	    insertnumber eCol,	0
	    insertnumber Idx,	0
		insertnumber _I,	0
		insertnumber _J,	0
		insertnumber _K,	0
		insertnumber _L,	0
	[section .text]	

	%imacro lcurses.HLine 3
		integers.eq sRow,%1
		integers.eq sCol,%2
		integers.eq eCol,%3
		$Call HLine
	%endmacro
	BEGIN.SUB HLine
		repeat.for Idx,sCol,eCol
			display.at sRow,Idx,c_Line
		end.repeat
	END.SUB HLine

	%imacro lcurses.VLine 3
		integers.eq sRow,%1
		integers.eq sCol,%2
		integers.eq eRow,%3
		$Call VLine
	%endmacro		
	BEGIN.SUB VLine
		repeat.for Idx,sRow,eRow
			display.at Idx,sCol,c_Bar
		end.repeat
	END.SUB VLine

	[section .data]
	    insertnumber startRow,	0
	    insertnumber startCol,	0
	    insertnumber endRow,	0
	    insertnumber endCol,	0
	    insertnumber shadow,    c_FALSE
	[section .text]

	%imacro lcurses.Box 5
		integers.eq startRow,%1
		integers.eq startCol,%2
		integers.eq endRow,%3
		integers.eq endCol,%4
		integers.eq shadow,%5
		$Call Box
	%endmacro	
	BEGIN.SUB Box
		display.at startRow,startCol,c_TopLeft
		display.at startRow,endCol,c_TopRight
		display.at endRow,startCol,c_BottomLeft
		display.at endRow,endCol,c_BottomRight
		
		integers.calc _I,=,startCol,+,1
		integers.calc _J,=,endCol,-,1		
		lcurses.HLine startRow,_I,_J		
		lcurses.HLine endRow,_I,_J
		
		integers.calc _I,=,startRow,+,1
		integers.calc _J,=,endRow,-,1		
		lcurses.VLine _I,startCol,_J
		lcurses.VLine _I,endCol,_J
		
		integers.calc _I,=,startRow,+,1
		integers.calc _J,=,endRow,-,1
		integers.calc _K,=,startCol,+,1
		integers.calc _L,=,endCol,-,startCol,-,1
		
		repeat.for Idx,_I,_J
			display.at Idx,_K,spaces(_L)
		end.repeat
		
		if  shadow,=,c_TRUE
		    display c_BlackBG
		    integers.calc _I,=,endRow,+,1
		    integers.calc _J,=,startCol,+,1
		    integers.calc _K,=,endCol,-,startCol,+,1
		    display.at _I,_J,spaces(_K)
	
		    integers.calc _J,=,endCol,+,1
		    integers.calc _K,=,startRow,+,1
		    integers.calc _L,=,endRow,+,1
		    repeat.for _I,_K,_L
		        display.at _I,_J,spaces(1)
		    end.repeat
		end.if
		
	END.SUB Box


;-----------------------------------------------------------------------
;	Handles AcceptAt with much better key control
;-----------------------------------------------------------------------
	[section .data]
		insertnumber 	Len,	00											; Length of input field
		insertword		Char,	01,''										; One char ata a time
		insertword		Temp,	80,''										; used for insert
		fieldAddress	dq 		00											; Address of input field
	[section .text]

	%imacro lcurses.AcceptAt 3

		integers.eq startRow,%1												; Grab the row
		integers.eq startCol,%2												; Grab the column
		mov qword[fieldAddress],%3											; Grab the address of the input field
		mov rax,@fieldLength(%3)											; Grab the length of the input field
		mov qword[Len],rax													; and save it
		Call AcceptAt

	%endmacro

BEGIN.SUB AcceptAt

	integers.eq _I,1														; Starting at 1st char of input field
	integers.eq _J,startCol													; Field position on screen													

	repeat.while 1,=,1														; ENDLESS LOOP

		Accept.At startRow,_J,Char											; Accept a character

		begin.test RETURN_CODE												; and test it

		;	---------
		;	ARROWLEFT
		;	---------
			when =,ARROWLEFT												; WHEN its ARROWLEFT
				if _I,>,1													; IF its greater than 1
					integers.sub _I,1										; move left 1
					integers.sub _J,1										; move left 1
				end.if														; END
			wend															; WEND

		;	----------
		;	ARROWRIGHT
		;	----------
			when =,ARROWRIGHT												; WHEN its ARRWORIGHT
				if _I,<,Len													; IF its not at the end of the field
					integers.add _I,1										; move right 1
					integers.add _J,1										; move right 1
				end.if														; END
			wend															; WEND

		;	----
		;	HOME
		;	----
			when =,HOME														; WHEN its HOME
				integers.eq _I,1											; move to the start of the field
				integers.eq _J,startCol										; move to the start of screen position
			wend															; WEND

		;	---
		;	END
		;	---
			when =,END														; WHEN its END
				integers.eq _I,Len											; move to the end of the field 
				integers.calc _J,=,startCol,+,Len,-,1						; move to the end of screen position
			wend															; WEND

		;	---------
		;	EXIT KEYS
		;	---------
			when _IN,{RETURN,ESCAPE,ARROWUP,ARROWDOWN}						; WHEN an exit key 
				exit.Repeat													; Exit the LOOP
			wend															; WEND

			.when RETURN_CODE,>,0											; Is it a Function Key
			.and  RETURN_CODE,<,13											;
			.end															;
				exit.Repeat													; Exit the LOOP
			wend															; WEND

		;	------------
		;	END OF FIELD
		;	------------
		;	STDIO will return automatically when at the end of this 1char field	
			when =,ENDOFFIELD
				words.copy Char,{qword[fieldAddress],_I,1}					; Copy the char to the input field
				if _I,<,Len													; If we at not at the end				
					integers.add _I,1										; move to the right
 					integers.add _J,1										; move to the right
				end.if														; END
			wend															; WEND

		;	---------
		;	BACKSPACE
		;	---------
			when =,BACKSPACE
				if _I,>,1													; IF its greater than 1
					integers.eq _K,_I
					integers.sub _I,1										; move left 1
					integers.sub _J,1										; move left 1
					words.pad {qword[fieldAddress],_K},{qword[fieldAddress],_I}
					display.at startRow,startCol,qword[fieldAddress]		; and redisplat it
				end.if														; END
			wend

		;	------
		;	INSERT
		;	------
			when =,INSERT
				words.pad {qword[fieldAddress],_I},Temp						; copy from cursor to temp
				integers.calc _K,=,_I,+,1									; move over 1
				words.pad Temp,{qword[fieldAddress],_K}						; copy back to new spot
				words.copy spaces(1),{qword[fieldAddress],_I}				; stick in a space
				display.at startRow,startCol,qword[fieldAddress]			; and redisplay it
			wend

		end.test															; END of TEST

	end.repeat																; END of LOOP

END.SUB AcceptAt
	
	[section .data]


	
